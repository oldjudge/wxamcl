#summary Documentation for general Lua functions

= General Functions =
* [GeneralFuncs#Output_to_screen Print, color and output buffer functions]
 * [GeneralFuncs#wxamcl.echo wxamcl.echo]
 * [GeneralFuncs#wxamcl.echowin wxamcl.echowin]
 * [GeneralFuncs#wxamcl.substitute wxamcl.substitute]
 * [GeneralFuncs#wxamcl.color wxamcl.color]
 * [GeneralFuncs#wxamcl.colorwin wxamcl.colorwin]
 * [GeneralFuncs#wxamcl.colorword wxamcl.colorword]
 * [GeneralFuncs#wxamcl.colorline wxamcl.colorline]
 * [GeneralFuncs#wxamcl.colorall wxamcl.colorall]
 * [GeneralFuncs#wxamcl.getlinenumber wxamcl.getlinenumber]
 * [GeneralFuncs#wxamcl.getline wxamcl.getline]
 * [GeneralFuncs#wxamcl.scroll wxamcl.scroll]
 * [GeneralFuncs#wxamcl.gag wxamcl.gag]
* [GeneralFuncs#Send_commands_to_the_MUD Send commands]
 * [GeneralFuncs#wxamcl.send wxamcl.send]
 * [GeneralFuncs#wxamcl.execute wxamcl.execute]
 
== Output to screen ==
   === wxamcl.echo ===
	Print text to the main mud window.
    ==== Usage: ====
		`msg = wxamcl.echo(text, fg-color (optional), bg-color (optional))`
		Examples:
		{{{
		msg = wxamcl.echo("This is a test", "black", "green")
		wxamcl.echo("Text on screen")
		wxamcl.echo("Test me!", "crimson", "deepskyblue")
		wxamcl.echo("Text", "#44cc00", "#000000")
		}}}
	The function returns the text parameter.
   === wxamcl.echowin ===
	Print text to a user created window.
	==== Usage: ====
		`msg = wxamcl.echo(window, text, fg-color (optional), bg-color (optional))`
		Examples:
		{{{
		msg = wxamcl.echo("chat", "This is a test in a window named 'chat'!", "black", "green")
		wxamcl.echo("userwin1", "Text on screen")
		wxamcl.echo("win", "Test me!", "crimson", "deepskyblue")
		wxamcl.echo("window1", "Text", "#44cc00", "#000000")
       }}}
	The function returns the text parameter.
   === wxamcl.substitute ===
	Replace text from mud and display the new line instead of the original one.
	==== Usage: ====
		`wxamcl.substitute(oldtext, newtext)`
		Examples:
		{{{
		wxamcl.substitute("Tom", "Jerry")
		wxamcl.substitute("Tom", "^x22J^x123e^x99r^x221r^x167y!")
		
       }}}
	The function returns nothing. You can use all 256 xterm colors via ^x0 to ^x255 to color parts of the replacement text, this works only with substitute function.
   === wxamcl.color ===
	Print colored text to the main mud window without creating a newline to create multicolored text lines.
    ==== Usage: ====
		`wxamcl.color(text, fg-color (optional), bg-color (optional))`
		Examples:
		{{{
		wxamcl.color("This is a test", "black", "green")
		wxamcl.color("Text on screen")
		wxamcl.color("Test me!", "crimson", "deepskyblue")
		wxamcl.color("Text", "#44cc00", "#000000")
		}}}
		Create a line with multiple colors like this:
		{{{
		wxamcl.echo("")
		wxamcl.color("Text ", "red")
		wxamcl.color("and text in green ", "green")
		wxamcl.color("and text in cyan ", "cyan")
		wxamcl.color("and so on!", "yellow")
	    }}}
	The function returns nothing.
   === wxamcl.colorwin ===
	Print colored text to a user created window without creating a newline to create multicolored text lines.
    ==== Usage: ====
		`wxamcl.colorwin(window, text, fg-color (optional), bg-color (optional))`
		Examples:
		{{{
		wxamcl.colorwin("chat", "This is a test", "black", "green")
		wxamcl.colorwin("window", "Text on screen")
		wxamcl.colorwin("win1", "Test me!", "crimson", "deepskyblue")
		wxamcl.colorwin("testwin", "Text", "#44cc00", "#000000")
		}}}
		Create a line with multiple colors like this:
		{{{
		wxamcl.echowin("test", "")
		wxamcl.colorwin("test", "Text ", "red")
		wxamcl.colorwin("test", "and text in green ", "green")
		wxamcl.colorwin("test", "and text in cyan ", "cyan")
		wxamcl.colorwin("test", "and so on!", "yellow")
	    }}}
	The function returns nothing.
   === wxamcl.colorword ===
	This function colors all occurances of 'word' in the given color combination. Use this within an action.
    ==== Usage: ====
		`wxamcl.colorword(word, fg-color (optional), bg-color (optional))`
		Examples:
		{{{
		wxamcl.colorword("Tom", "lavender", "maroon")
		wxamcl.colorword("Tom", "#ffffff")
		wxamcl.colorword("Tom", "#44cc00", "#000000")
		}}}
	    This will color all occurances of 'Tom' in the given color combination. To find lines with 'Tom' use an action.
	The function returns nothing.
   === wxamcl.colorline ===
    This function colors a line of text in the output buffer.
    ==== Usage: ====
		`wxamcl.colorline(linenumber, fg-color (optional), bg-color (optional))`
		Examples:
		{{{
		wxamcl.colorline(23, "lavender", "maroon")
		wxamcl.colorline(wxamcl.getlinenumber(), "#ffffff")
		wxamcl.colorline(444, "#44cc00", "#000000")
		}}}
	The function returns nothing.
   === wxamcl.colorall ===
	This function colors the whole visible output buffer.
    ==== Usage: ====
		`wxamcl.colorall(fg-color (optional), bg-color (optional))`
		Examples:
		{{{
		wxamcl.colorall("lavender", "maroon")
		wxamcl.colorall("#ffffff")
		wxamcl.colorall("#44cc00", "#000000")
		wxamcl.colorall() -- white and black
		}}}
	The function returns nothing.
   === wxamcl.getlinenumber ===
	This function retrieves the number of the last received line.
    ==== Usage: ====
		`nr = wxamcl.getlinenumber()`
		Examples:
		{{{
		nr = wxamcl.getlinenumber()
		}}}
	The function returns the number of the last received line, ie the number of lines recieved so far.
   === wxamcl.getline ===
	This function retrieves the line and all the styles for it as a table.
    ==== Usage: ====
		`t = wxamcl.getline(linenumber)`
		Examples:
		{{{
		t = wxamcl.getline(33)
		wxamcl.echo("")
		for i,v in ipairs(t) do
		 wxamcl.color(v.text, v.fore, v.back)
		end 
		}}}
	The function returns a table containing the line and its styles. Fields of the table are: text, fore, back, length
   === wxamcl.scroll ===
	This function enables or disables scrolling of the main output window.
    ==== Usage: ====
		`wxamcl.scroll(true|false)`
		Examples:
		{{{
		wxamcl.scroll(true) --normal scrolling
		wxamcl.scroll(false) --do not scroll even if new text arrives from mud
		}}}
	The function returns nothing.
   === wxamcl.gag ===
	This function gags the current line from the main output window. Use in an action.
    ==== Usage: ====
		`wxamcl.gag(line)`
		Examples:
		{{{
		wxamcl.gag(0) --gag current line
		}}}
	The function returns nothing.
== Send commands to the MUD ==
   === wxamcl.send ===
    Sends text unparsed to the Mud.
	==== Usage: ====
		`wxamcl.send(command)`
		Examples:
		{{{
		wxamcl.send("say ;)")
		wxamcl.send("quit")
		}}}
	The function returns nothing.
   === wxamcl.execute ===
    Sends a command to the Mud. The command is parsed as if typed in the command line. You can therefore send aliases, variables and so on.
	==== Usage: ====
		`wxamcl.send(command)`
		Examples:
		{{{
		wxamcl.send("look at "..$target)
		wxamcl.send("quit")
		}}}
	The function returns nothing.